version: '3.8'

services:

  # 1. Сервис базы данных PostgreSQL
  db:
    image: postgres:15-alpine
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # 2. Сервис PGAdmin
  pgadmin:
    image: dpage/pgadmin4
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      db:
        condition: service_healthy

  # 3. Сервис Backend (FastAPI)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    restart: always
    # Локально открываем порт 8000
    ports:
      - "8000:8000"
    environment:
      # Передача переменных окружения БД в приложение
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_SERVER: ${POSTGRES_SERVER}
      SECRET_KEY: ${SECRET_KEY}
      UNSPLASH_ACCESS_KEY: ${UNSPLASH_ACCESS_KEY}
    depends_on:
      db:
        condition: service_healthy

  # 4. Сервис Frontend (Vue/Nginx)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    restart: always
    # Локально открываем порт 80
    ports:
      - "80:80"
    depends_on:
      - backend

volumes:
  postgres_data:
  pgadmin_data: